The Challenge:

Spotify is exploring a new mobile feature that combines the viral, short-form nature of TikTok and Instagram Reels with the personalization and musical identity of Spotify artist profiles. Your task is to prototype a music discovery and content-sharing mobile app that reimagines how artists and music creators share new content and build fan engagement.

In this concept, artists and users can upload short-form, audio-visual snippets — think unreleased track previews, beat drops, lyric tests, or behind-the-scenes studio moments. These clips appear in a vertically scrolling, immersive feed designed for effortless exploration and engagement. Beyond just viewing clips, users can interact by liking, commenting, or sharing, creating a dynamic and social music discovery experience.

Each user should have a profile page — but not just for displaying their clips. Imagine this page as a mini Spotify artist profile, where users can group their content into “albums” or themed collections. For example, an up-and-coming artist might have an album for Previews from My Upcoming EP, a collection called Studio Freestyles, and a set of Fan Collab Duets. These public collections should give fans a way to explore a creator’s evolving musical identity — not just one-off clips. Think of it as an interactive, short-form extension of what a Spotify artist profile could become.

You’ll be responsible for building both the frontend and backend of this application. You’re free to use any tools or frameworks you’re most comfortable with — ideally something like React Native or Swift for the mobile frontend and Python or Java for the backend.

While there’s no strict minimum requirement, we encourage you to build out as much functionality as possible within the 72-hour window. At the very least, your submission should feature a polished, sleek UI with a vertically scrolling content feed, the ability to upload and view audio-visual posts, post interactions like likes and comments, and a functional backend.

The more complete, clean, and creative your app is, the stronger your submission will be. You now have exactly 72 hours from the time this email was sent — your submission is due by Monday, April 14th at 12:00 PM PST.

----------

Before the deadline, please reply to this email with:
• A link to your PUBLIC GitHub repository
• A 2-3 minute demo video PUBLISHED ON YOUTUBE showing and explaining how your app works
• Any ADDITIONAL notes or documentation you’d like to include

This project is intended to simulate a real-world product sprint, so please prioritize building something that works over polishing every last detail. We know this is a time-boxed challenge, and we’re excited to see what you create under pressure. Please let us know if you have any questions.

Game plan:

🔧 TECH STACK (Recommended)

Frontend (Mobile App):

    React Native (Expo for fast iteration)
    

Backend:    
    Database: Firebase (fast)

    Storage: Firebase Storage

🕒 70-HOUR EXECUTION PLAN
🕐 Phase 1: Setup + Core Feed UI (Hours 0–10)

Goals:

    Project scaffolding (GitHub repo, Expo project)

    Feed layout (TikTok/Reels style vertical scroll)

    Placeholder content (mock videos/snippets)

Tasks:

    Set up navigation stack (Expo Router)

    Create FeedScreen with mock post cards

    Card should support: video playback, like button, comment button, share button

🕑 Phase 2: Backend MVP (Hours 10–20)

Goals:

    API endpoints + DB schema

    Upload, fetch, and interact with posts

Tasks:

    Set up Firebase

    Tables: Users, Posts, Likes, Comments, Collections

    Backend endpoints:

        GET /feed

        POST /upload

        POST /like

        POST /comment

    Basic auth with Firebase email

🕒 Phase 3: Upload & Playback (Hours 20–35)

Goals:

    Upload short-form clips

    Video/audio preview with title/description

Tasks:

    Add UploadScreen

    Integrate camera/file picker (Expo ImagePicker + AV)

    Store media in Firebase Storage

    Connect to backend

🕓 Phase 4: Interactions & Profiles (Hours 35–50)

Goals:

    Likes, comments, user profile page

Tasks:

    Add ProfileScreen (with collections/albums)

    Add comments modal

    Show user’s clips grouped by “albums” (tag field)

🕔 Phase 5: Collections (Hours 50–60)

Goals:

    Support content grouping

    Allow user to assign a post to a “collection”

Tasks:

    Add "New Collection" modal

    Show collections on profile

    Collection screen: List posts under that theme

🕕 Phase 6: Polish + Final Video (Hours 60–70)

Goals:

    UI polish

    Bug fixes

    Record demo video

Tasks:

    Add basic branding + transitions

    Test flows (upload, view, like, comment, collections)

    Record a 2–3 minute video (OBS or phone screen capture)

    Publish GitHub repo & YouTube demo

✅ Submission Checklist

Public GitHub repo with all source code

YouTube video showing main features (feed, upload, profile)

README with instructions + brief architecture

    Bonus: Demo credentials or dummy login info

💡 Pro Tips

    Hardcode some dummy clips early for faster UI iteration

    Reuse components for feed and collections

    Use Firebase auth + storage if you want minimal backend hassle

    Keep commits frequent and clean for reviewers
