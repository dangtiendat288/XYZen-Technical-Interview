rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Default deny all
    match /{document=**} {
      allow read, write: if false;
    }

    // Users collection
    match /users/{userId} {
      // Anyone can read user profiles
      allow read: if true;
      
      // Users can only create and update their own profiles
      allow create, update: if request.auth != null && request.auth.uid == userId;
      
      // Only admins can delete user profiles
      allow delete: if false;
    }

    // Posts collection - updated to handle likes
    match /posts/{postId} {
      // Anyone can read posts
      allow read: if true;
      
      // Only authenticated users can create posts
      allow create: if request.auth != null && 
                     request.resource.data.userId == request.auth.uid;
      
      // Users can only update and delete their own posts
      allow update, delete: if request.auth != null && 
                             resource.data.userId == request.auth.uid;
      
      // Allow any authenticated user to update likes and likedBy fields for posts
      allow update: if request.auth != null && 
                     request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes', 'likedBy']);
      
      // Allow any authenticated user to update likes & comments counters
      allow update: if request.auth != null && 
                     request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes', 'comments', 'likedBy']);
    }
    
    // Collections (for organizing posts)
    match /collections/{collectionId} {
      // Authenticated users can read all collections
      allow read: if request.auth != null;
      
      // User can create collections
      allow create: if request.auth != null && 
                     request.resource.data.createdBy == request.auth.uid;
      
      // Users can only update/delete collections they created
      allow update, delete: if request.auth != null && 
                            resource.data.createdBy == request.auth.uid;
                            
      // Allow updating only the itemCount field by any authenticated user
      allow update: if request.auth != null && 
                     request.resource.data.diff(resource.data).affectedKeys().hasOnly(['itemCount']);
    }
    
    // Comments
    match /comments/{commentId} {
      // Anyone can read comments
      allow read: if true;
      
      // Only authenticated users can create comments
      allow create: if request.auth != null && 
                     request.resource.data.userId == request.auth.uid;
      
      // Users can only update/delete their own comments
      allow update, delete: if request.auth != null && 
                            resource.data.userId == request.auth.uid;
    }
    
    // Likes (optional separate collection for more complex like functionality)
    match /likes/{likeId} {
      // Anyone can read likes
      allow read: if true;
      
      // Only authenticated users can create likes, and they can only like as themselves
      allow create: if request.auth != null && 
                     request.resource.data.userId == request.auth.uid;
      
      // Users can only update/delete their own likes
      allow delete: if request.auth != null && 
                     resource.data.userId == request.auth.uid;
    }
    
    // Videos collection for video like functionality
    match /videos/{videoId} {
      // Authenticated users can read all videos
      allow read: if request.auth != null;
      
      // Users can create videos with their userId
      allow create: if request.auth != null && 
                     request.resource.data.userId == request.auth.uid;
      
      // Video owners can update/delete their own videos
      allow update, delete: if request.auth != null && 
                             resource.data.userId == request.auth.uid;
      
      // Fix: Allow any authenticated user to update like-related fields
      // This rule needs to be separate to avoid conflicts with the previous rule
      allow update: if request.auth != null;
    }
  }
}
